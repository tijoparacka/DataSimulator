
# Config to produce to Kafka
sim.kafka.bootstrap.servers=localhost:9092
sim.kafka.topicName=demo
#sim.kafka.keyColumn=channel
#sim.kafka.username=
#sim.kafka.password=

# Config to produce to S3
sim.s3.accesskey=
sim.s3.secretKey=
sim.s3.bucket=
sim.s3.folder=
sim.s3.region=us-east-1

# Config to produce to Kinesis
sim.kinesis.region=us-east-1
sim.kinesis.maxConnection=10
sim.kinesis.maxBufferTime=60
sim.kinesis.threadingModel=PER_REQUEST
sim.kinesis.threadPoolSize=10
sim.kinesis.aggregation.enabled=false
sim.kinesis.aggregation.maxCount=1
sim.kinesis.aggregation.maxSize=200
sim.kinesis.requestTimeout=600
sim.kinesis.streamName=test

# Config to produce to file
sim.file.maxrows=100000
sim.file.outputdir=output
sim.file.fileNameLength=15

# Config to produce to DB
sim.database.connectionUrl=jdbc:postgresql://127.0.0.1:5432/postgres
sim.database.driver=org.postgresql.Driver
sim.database.username=postgres
sim.database.password=welcome
sim.database.tables= [ \
{"table":"Test1", "columns":["Col1","Col2"],"indexes":[1,2]},\
{"table":"Test2","columns"=["Col1","Col2"],"indexes":[1,2]}\
]

# Config to produce to polaris stream


# Config to produce to polaris batch

# Simulator related configs
sim.logging.rowCount=100000
sim.generator.sleepTimeMilliSec=0

sim.generic.infer.packageName=com.tijo.examples
sim.generic.infer.jsonPath=examples/wikipedia/Wikipedia.json
sim.generic.infer.generateCode=true
sim.generic.infer.pojoOutputDir=pojooutput

sim.cardinality.generator.folder=cardinality

sim.generic.eventClass=com.tijo.examples.Dummy30
sim.generic.metadata= [ \
{"dimension" : "time" ,"type":"DATE","limit":10000,"format":"yyyy-MM-dd HH:mm:ss"},\
{"dimension" : "col1" ,"type":"LONG","limit":1000},\
{"dimension" : "col2" ,"type":"FIXED","file":"channel","limit" :15 ,"cardinality":1000},\
{"dimension" : "col3" ,"type":"FIXED","file":"cityName","limit" :10 ,"cardinality":1000 }  ,\
{"dimension" : "col4" ,"type":"STRING","limit":50},\
{"dimension" : "col5" ,"type":"INT","limit":1000},\
{"dimension" : "col6" ,"type":"FIXED","file":"countryIsoCode","limit" :2 ,"cardinality":200},\
{"dimension" : "col7" ,"type":"FIXED","file":"countryName", "limit" :10 ,"cardinality":200 },\
{"dimension" : "col8" ,"type":"INT","limit":1000},\
{"dimension" : "col9" ,"type":"INT","limit":1000},\
{"dimension" : "col10" ,"type":"INT","limit":1000},\
{"dimension" : "col11" ,"type":"STRING","limit":10},\
{"dimension" : "col12" ,"type":"FIXED","file":"flags","limit" :5 ,"cardinality":1000},\
{"dimension" : "col13" ,"type":"CONSTANT_STRING","constants":["true","false"]},\
{"dimension" : "col14" ,"type":"CONSTANT_STRING","constants":["true","false"]},\
{"dimension" : "col15" ,"type":"CONSTANT_STRING","constants":["true","false"]},\
{"dimension" : "col16" ,"type":"CONSTANT_STRING","constants":["true","false"]},\
{"dimension" : "col17" ,"type":"CONSTANT_STRING","constants":["true","false"]},\
{"dimension" : "col18" ,"type":"FIXED","file":"cityName","limit" :100 ,"cardinality":100000},\
{"dimension" : "col19" ,"type":"FIXED","file":"countryIsoCode","limit" :2 ,"cardinality":200},\
{"dimension" : "col20" ,"type":"FIXED","file":"regionName","limit" :15 ,"cardinality":200},\
{"dimension" : "col21" ,"type" : "SCRIPT", "script": "data = row.get(\\\"col1\\\") + row.get(\\\"col2\\\")"},\
{"dimension" : "col22" ,"type":"FIXED","file":"user","limit" :50 ,"cardinality":100000}\
]
# to use lookup create a  csv file with key and value then keep the type as "LOOKUP" , provide the file path in `file` and refer the key with `referenceDim`
#  {"dimension" : "countryName" ,"type":"LOOKUP","file":"countryName","referenceDim":"countryIsoCode"},\
  
